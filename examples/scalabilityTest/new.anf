<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<analysis version="2">
    <inputs/>
    <charts>
        <chart icon="icons/full/obj/linechart.png" id="8" name="wifi" template="linechart_mpl" type="MATPLOTLIB">
            <script><![CDATA[from omnetpp.scave import results, chart, vectorops as ops
import matplotlib.pyplot as plt
import pandas as pd

params = chart.get_properties()

# This expression selects the results (you might be able to logically simplify it)

filter_expression = params["filter"]

# The data is returned as a Pandas DataFrame
df = results.get_vectors(filter_expression, include_attrs=True, include_itervars=True)

df = ops.perform_vector_ops(df, params["vector_operations"])

# You can perform any transformations on the data here

#d = {'numhosts': [10,20,50,100,200,500,1000,2000,5000],'performance': [417,247,103,51,21,8,3.5,1.7]}

#d = {'numhosts': [10,20,50,100,200,500,1000,2000],'performance': [417,247,103,51,21,8,3.5,1.7]}

d = {'numhosts': [10,20,50,100,200,500,1000,2000,5000,10000],'performance': [417*4*10,247*4*20,103*4*50,51*4*100,21*4*200,8*4*500,3.5*4*1000,1.7*4*2000,0.7*4*5000,0.3*4*10000]}

print("d:",d)

df = pd.DataFrame(d)

# Tx = 4 * P * numhosts

print(df)

df = df.pivot_table('performance','numhosts')

print(df)

#for i in df:
#    print("i:",i)
#    i['performance'] = i['performance'] * 4 * i['numhosts']
#    print("p:",i['performance'])

plt.xlabel('Number of receivers (numhosts)')

title, legend = chart.extract_label_columns(df)

for t in df.itertuples(index=False):
    style = dict()
    interp = t.interpolationmode if 'interpolationmode' in df else 'sample-hold' if 'enum' in df else None
    if interp:
        if interp == "none":
            style['linestyle'] = ' '
            style['marker'] = '.'
        elif interp == "linear":
            pass # nothing to do
        elif interp == "sample-hold":
            style['drawstyle'] = 'steps-post'
        elif interp == "backward-sample-hold":
            style['drawstyle'] = 'steps-pre'

style['marker'] = 's'
style['markersize'] = 3

plt.plot(df, **style)

#plt.xscale('log')

plt.title("Rx/sec (wifi)")

plt.legend()
plt.grid()]]></script>
            <dialogPage id="Main" label="Main"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xswt xmlns:x="http://sweet_swt.sf.net/xswt">

  <import xmlns="http://sweet_swt.sf.net/xswt">
    <package name="java.lang"/>
    <package name="org.eclipse.swt.widgets" />
    <package name="org.eclipse.swt.graphics" />
    <package name="org.eclipse.swt.layout" />
    <package name="org.eclipse.swt.custom" />
    <package name="org.omnetpp.common.wizard.support" />
    <package name="org.omnetpp.ned.editor.wizards.support" />
    <package name="org.omnetpp.cdt.wizard.support" />
  </import>
  <layout x:class="GridLayout" numColumns="2"/>

  <x:children>

    <!-- page generated from the following spec:
Names {
	chartName,
},
Options {
	Use antialias?,
	Use caching?,
},
Colors {
	backgroundColor
}    
    -->
    
    <!-- Names { -->
    <group text="Names">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- chartName -->
    <label text="Chart name:"/>
    <text x:id="chart_name" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </text>

    <!--  -->

    <!-- } -->
      </x:children>
    </group>

    <!-- Colors { -->
    <group text="Colors">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- backgroundColor -->
    <label text="Background color:"/>
    <ColorChooser x:id="background_color" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </ColorChooser>

    <!-- } -->
      </x:children>
    </group>

  </x:children>
</xswt>
]]></dialogPage>
            <dialogPage id="Input" label="Input"><![CDATA[<?xml version='1.0' encoding='UTF-8'?>
<xswt xmlns:x='http://sweet_swt.sf.net/xswt'>
  <import xmlns='http://sweet_swt.sf.net/xswt'>
    <package name='java.lang'/>
    <package name='org.eclipse.swt.widgets' />
    <package name='org.eclipse.swt.graphics' />
    <package name='org.eclipse.swt.layout' />
    <package name='org.eclipse.swt.custom' />
  </import>
  <layout x:class='GridLayout' numColumns='1'/>
  <x:children>
    <group text=''>

      <layoutData x:class='GridData' horizontalAlignment='FILL' verticalAlignment='FILL' grabExcessHorizontalSpace='true' grabExcessVerticalSpace='true'/>
      <layout x:class='GridLayout' numColumns='2'/>

      <x:children>
            <label text="Filter expression:">
            	<layoutData x:class="GridData" horizontalAlignment="BEGINNING" verticalAlignment="BEGINNING"/>
            </label>
            <text x:id="filter" x:style="BORDER|WRAP|MULTI" x:id.isFilter="true"> 
                <layoutData x:class="GridData" horizontalAlignment="FILL" verticalAlignment="FILL" grabExcessHorizontalSpace="true" grabExcessVerticalSpace="true"/>
            </text>

            <label text="Chart Title:"/>
            <text x:id="title" x:style="BORDER">
          <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
        </text>
      </x:children>

    </group>
  </x:children>
</xswt>]]></dialogPage>
        </chart>
        <chart icon="icons/full/obj/linechart.png" id="18" name="unitdisk" template="linechart_mpl" type="MATPLOTLIB">
            <script><![CDATA[from omnetpp.scave import results, chart, vectorops as ops
import matplotlib.pyplot as plt
import pandas as pd

params = chart.get_properties()

# This expression selects the results (you might be able to logically simplify it)

filter_expression = params["filter"]

# The data is returned as a Pandas DataFrame
df = results.get_vectors(filter_expression, include_attrs=True, include_itervars=True)

df = ops.perform_vector_ops(df, params["vector_operations"])

# You can perform any transformations on the data here

#d = {'numhosts': [10,20,50,100,200,500,1000,2000,5000],'performance': [417,247,103,51,21,8,3.5,1.7]}

#d = {'numhosts': [10,20,50,100,200,500,1000,2000],'performance': [417,247,103,51,21,8,3.5,1.7]}

du = {'numhosts': [10,20,50,100,200,500,1000,2000,5000,10000],'performance': [1800*4*10,1085*4*20,535*4*50,278*4*100,132*4*200,42*4*500,18*4*1000,8.5*4*2000,3*4*5000,1.4*4*10000]}

print("du:",du)

df = pd.DataFrame(du)

# Tx = 4 * P * numhosts

print(df)

df = df.pivot_table('performance','numhosts')

print(df)

#for i in df:
#    print("i:",i)
#    i['performance'] = i['performance'] * 4 * i['numhosts']
#    print("p:",i['performance'])

plt.xlabel('Number of receivers (numhosts)')

title, legend = chart.extract_label_columns(df)

for t in df.itertuples(index=False):
    style = dict()
    interp = t.interpolationmode if 'interpolationmode' in df else 'sample-hold' if 'enum' in df else None
    if interp:
        if interp == "none":
            style['linestyle'] = ' '
            style['marker'] = '.'
        elif interp == "linear":
            pass # nothing to do
        elif interp == "sample-hold":
            style['drawstyle'] = 'steps-post'
        elif interp == "backward-sample-hold":
            style['drawstyle'] = 'steps-pre'

style['marker'] = 's'
style['markersize'] = 3
style['color'] = 'orange'

plt.plot(df, **style)

#plt.xscale('log')

plt.title("Rx/sec (unitdisk)")

plt.legend()
plt.grid()]]></script>
            <dialogPage id="Main" label="Main"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xswt xmlns:x="http://sweet_swt.sf.net/xswt">

  <import xmlns="http://sweet_swt.sf.net/xswt">
    <package name="java.lang"/>
    <package name="org.eclipse.swt.widgets" />
    <package name="org.eclipse.swt.graphics" />
    <package name="org.eclipse.swt.layout" />
    <package name="org.eclipse.swt.custom" />
    <package name="org.omnetpp.common.wizard.support" />
    <package name="org.omnetpp.ned.editor.wizards.support" />
    <package name="org.omnetpp.cdt.wizard.support" />
  </import>
  <layout x:class="GridLayout" numColumns="2"/>

  <x:children>

    <!-- page generated from the following spec:
Names {
	chartName,
},
Options {
	Use antialias?,
	Use caching?,
},
Colors {
	backgroundColor
}    
    -->
    
    <!-- Names { -->
    <group text="Names">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- chartName -->
    <label text="Chart name:"/>
    <text x:id="chart_name" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </text>

    <!--  -->

    <!-- } -->
      </x:children>
    </group>

    <!-- Colors { -->
    <group text="Colors">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- backgroundColor -->
    <label text="Background color:"/>
    <ColorChooser x:id="background_color" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </ColorChooser>

    <!-- } -->
      </x:children>
    </group>

  </x:children>
</xswt>
]]></dialogPage>
            <dialogPage id="Input" label="Input"><![CDATA[<?xml version='1.0' encoding='UTF-8'?>
<xswt xmlns:x='http://sweet_swt.sf.net/xswt'>
  <import xmlns='http://sweet_swt.sf.net/xswt'>
    <package name='java.lang'/>
    <package name='org.eclipse.swt.widgets' />
    <package name='org.eclipse.swt.graphics' />
    <package name='org.eclipse.swt.layout' />
    <package name='org.eclipse.swt.custom' />
  </import>
  <layout x:class='GridLayout' numColumns='1'/>
  <x:children>
    <group text=''>

      <layoutData x:class='GridData' horizontalAlignment='FILL' verticalAlignment='FILL' grabExcessHorizontalSpace='true' grabExcessVerticalSpace='true'/>
      <layout x:class='GridLayout' numColumns='2'/>

      <x:children>
            <label text="Filter expression:">
            	<layoutData x:class="GridData" horizontalAlignment="BEGINNING" verticalAlignment="BEGINNING"/>
            </label>
            <text x:id="filter" x:style="BORDER|WRAP|MULTI" x:id.isFilter="true"> 
                <layoutData x:class="GridData" horizontalAlignment="FILL" verticalAlignment="FILL" grabExcessHorizontalSpace="true" grabExcessVerticalSpace="true"/>
            </text>

            <label text="Chart Title:"/>
            <text x:id="title" x:style="BORDER">
          <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
        </text>
      </x:children>

    </group>
  </x:children>
</xswt>]]></dialogPage>
        </chart>
        <chart icon="icons/full/obj/linechart.png" id="19" name="bmac" template="linechart_mpl" type="MATPLOTLIB">
            <script><![CDATA[from omnetpp.scave import results, chart, vectorops as ops
import matplotlib.pyplot as plt
import pandas as pd

params = chart.get_properties()

# This expression selects the results (you might be able to logically simplify it)

filter_expression = params["filter"]

# The data is returned as a Pandas DataFrame
df = results.get_vectors(filter_expression, include_attrs=True, include_itervars=True)

df = ops.perform_vector_ops(df, params["vector_operations"])

# You can perform any transformations on the data here

#d = {'numhosts': [10,20,50,100,200,500,1000,2000,5000],'performance': [417,247,103,51,21,8,3.5,1.7]}

#d = {'numhosts': [10,20,50,100,200,500,1000,2000],'performance': [417,247,103,51,21,8,3.5,1.7]}

d = {'numhosts': [10,20,50,100,200,500,1000,2000,5000,10000],'performance': [306*4*10,175*4*20,74*4*50,35*4*100,15*4*200,5*4*500,2*4*1000,1*4*2000,0.35*4*5000,0.2*4*10000]}

print("d:",d)

df = pd.DataFrame(d)

# Tx = 4 * P * numhosts

print(df)

df = df.pivot_table('performance','numhosts')

print(df)

#for i in df:
#    print("i:",i)
#    i['performance'] = i['performance'] * 4 * i['numhosts']
#    print("p:",i['performance'])

plt.xlabel('Number of receivers (numhosts)')

title, legend = chart.extract_label_columns(df)

for t in df.itertuples(index=False):
    style = dict()
    interp = t.interpolationmode if 'interpolationmode' in df else 'sample-hold' if 'enum' in df else None
    if interp:
        if interp == "none":
            style['linestyle'] = ' '
            style['marker'] = '.'
        elif interp == "linear":
            pass # nothing to do
        elif interp == "sample-hold":
            style['drawstyle'] = 'steps-post'
        elif interp == "backward-sample-hold":
            style['drawstyle'] = 'steps-pre'

style['marker'] = 's'
style['markersize'] = 3
style['color'] = 'green'

plt.plot(df, **style)

#plt.xscale('log')

plt.title("Rx/sec (bmac)")

plt.legend()
plt.grid()]]></script>
            <dialogPage id="Main" label="Main"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xswt xmlns:x="http://sweet_swt.sf.net/xswt">

  <import xmlns="http://sweet_swt.sf.net/xswt">
    <package name="java.lang"/>
    <package name="org.eclipse.swt.widgets" />
    <package name="org.eclipse.swt.graphics" />
    <package name="org.eclipse.swt.layout" />
    <package name="org.eclipse.swt.custom" />
    <package name="org.omnetpp.common.wizard.support" />
    <package name="org.omnetpp.ned.editor.wizards.support" />
    <package name="org.omnetpp.cdt.wizard.support" />
  </import>
  <layout x:class="GridLayout" numColumns="2"/>

  <x:children>

    <!-- page generated from the following spec:
Names {
	chartName,
},
Options {
	Use antialias?,
	Use caching?,
},
Colors {
	backgroundColor
}    
    -->
    
    <!-- Names { -->
    <group text="Names">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- chartName -->
    <label text="Chart name:"/>
    <text x:id="chart_name" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </text>

    <!--  -->

    <!-- } -->
      </x:children>
    </group>

    <!-- Colors { -->
    <group text="Colors">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- backgroundColor -->
    <label text="Background color:"/>
    <ColorChooser x:id="background_color" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </ColorChooser>

    <!-- } -->
      </x:children>
    </group>

  </x:children>
</xswt>
]]></dialogPage>
            <dialogPage id="Input" label="Input"><![CDATA[<?xml version='1.0' encoding='UTF-8'?>
<xswt xmlns:x='http://sweet_swt.sf.net/xswt'>
  <import xmlns='http://sweet_swt.sf.net/xswt'>
    <package name='java.lang'/>
    <package name='org.eclipse.swt.widgets' />
    <package name='org.eclipse.swt.graphics' />
    <package name='org.eclipse.swt.layout' />
    <package name='org.eclipse.swt.custom' />
  </import>
  <layout x:class='GridLayout' numColumns='1'/>
  <x:children>
    <group text=''>

      <layoutData x:class='GridData' horizontalAlignment='FILL' verticalAlignment='FILL' grabExcessHorizontalSpace='true' grabExcessVerticalSpace='true'/>
      <layout x:class='GridLayout' numColumns='2'/>

      <x:children>
            <label text="Filter expression:">
            	<layoutData x:class="GridData" horizontalAlignment="BEGINNING" verticalAlignment="BEGINNING"/>
            </label>
            <text x:id="filter" x:style="BORDER|WRAP|MULTI" x:id.isFilter="true"> 
                <layoutData x:class="GridData" horizontalAlignment="FILL" verticalAlignment="FILL" grabExcessHorizontalSpace="true" grabExcessVerticalSpace="true"/>
            </text>

            <label text="Chart Title:"/>
            <text x:id="title" x:style="BORDER">
          <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
        </text>
      </x:children>

    </group>
  </x:children>
</xswt>]]></dialogPage>
        </chart>
        <chart icon="icons/full/obj/linechart.png" id="45" name="csmacamac" template="linechart_mpl" type="MATPLOTLIB">
            <script><![CDATA[from omnetpp.scave import results, chart, vectorops as ops
import matplotlib.pyplot as plt
import pandas as pd

params = chart.get_properties()

# This expression selects the results (you might be able to logically simplify it)

filter_expression = params["filter"]

# The data is returned as a Pandas DataFrame
df = results.get_vectors(filter_expression, include_attrs=True, include_itervars=True)

df = ops.perform_vector_ops(df, params["vector_operations"])

# You can perform any transformations on the data here

#d = {'numhosts': [10,20,50,100,200,500,1000,2000,5000],'performance': [417,247,103,51,21,8,3.5,1.7]}

#d = {'numhosts': [10,20,50,100,200,500,1000,2000],'performance': [417,247,103,51,21,8,3.5,1.7]}

d = {'numhosts': [10,20,50,100,200,500,1000,2000,5000,10000],'performance': [90*4*10,55*4*20,23*4*50,11*4*100,4.5*4*200,1.7*4*500,0.7*4*1000,0.35*4*2000,0.12*4*5000,0.06*4*10000]}

print("d:",d)

df = pd.DataFrame(d)

# Tx = 4 * P * numhosts

print(df)

df = df.pivot_table('performance','numhosts')

print(df)

#for i in df:
#    print("i:",i)
#    i['performance'] = i['performance'] * 4 * i['numhosts']
#    print("p:",i['performance'])

plt.xlabel('Number of receivers (numhosts)')

title, legend = chart.extract_label_columns(df)

for t in df.itertuples(index=False):
    style = dict()
    interp = t.interpolationmode if 'interpolationmode' in df else 'sample-hold' if 'enum' in df else None
    if interp:
        if interp == "none":
            style['linestyle'] = ' '
            style['marker'] = '.'
        elif interp == "linear":
            pass # nothing to do
        elif interp == "sample-hold":
            style['drawstyle'] = 'steps-post'
        elif interp == "backward-sample-hold":
            style['drawstyle'] = 'steps-pre'

style['marker'] = 's'
style['markersize'] = 3
style['color'] = 'red'

plt.plot(df, **style)

#plt.xscale('log')

plt.title("Rx/sec (csmacamac)")

plt.legend()
plt.grid()]]></script>
            <dialogPage id="Main" label="Main"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xswt xmlns:x="http://sweet_swt.sf.net/xswt">

  <import xmlns="http://sweet_swt.sf.net/xswt">
    <package name="java.lang"/>
    <package name="org.eclipse.swt.widgets" />
    <package name="org.eclipse.swt.graphics" />
    <package name="org.eclipse.swt.layout" />
    <package name="org.eclipse.swt.custom" />
    <package name="org.omnetpp.common.wizard.support" />
    <package name="org.omnetpp.ned.editor.wizards.support" />
    <package name="org.omnetpp.cdt.wizard.support" />
  </import>
  <layout x:class="GridLayout" numColumns="2"/>

  <x:children>

    <!-- page generated from the following spec:
Names {
	chartName,
},
Options {
	Use antialias?,
	Use caching?,
},
Colors {
	backgroundColor
}    
    -->
    
    <!-- Names { -->
    <group text="Names">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- chartName -->
    <label text="Chart name:"/>
    <text x:id="chart_name" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </text>

    <!--  -->

    <!-- } -->
      </x:children>
    </group>

    <!-- Colors { -->
    <group text="Colors">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- backgroundColor -->
    <label text="Background color:"/>
    <ColorChooser x:id="background_color" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </ColorChooser>

    <!-- } -->
      </x:children>
    </group>

  </x:children>
</xswt>
]]></dialogPage>
            <dialogPage id="Input" label="Input"><![CDATA[<?xml version='1.0' encoding='UTF-8'?>
<xswt xmlns:x='http://sweet_swt.sf.net/xswt'>
  <import xmlns='http://sweet_swt.sf.net/xswt'>
    <package name='java.lang'/>
    <package name='org.eclipse.swt.widgets' />
    <package name='org.eclipse.swt.graphics' />
    <package name='org.eclipse.swt.layout' />
    <package name='org.eclipse.swt.custom' />
  </import>
  <layout x:class='GridLayout' numColumns='1'/>
  <x:children>
    <group text=''>

      <layoutData x:class='GridData' horizontalAlignment='FILL' verticalAlignment='FILL' grabExcessHorizontalSpace='true' grabExcessVerticalSpace='true'/>
      <layout x:class='GridLayout' numColumns='2'/>

      <x:children>
            <label text="Filter expression:">
            	<layoutData x:class="GridData" horizontalAlignment="BEGINNING" verticalAlignment="BEGINNING"/>
            </label>
            <text x:id="filter" x:style="BORDER|WRAP|MULTI" x:id.isFilter="true"> 
                <layoutData x:class="GridData" horizontalAlignment="FILL" verticalAlignment="FILL" grabExcessHorizontalSpace="true" grabExcessVerticalSpace="true"/>
            </text>

            <label text="Chart Title:"/>
            <text x:id="title" x:style="BORDER">
          <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
        </text>
      </x:children>

    </group>
  </x:children>
</xswt>]]></dialogPage>
        </chart>
        <chart icon="icons/full/obj/linechart.png" id="17" name="all" template="linechart_mpl" type="MATPLOTLIB">
            <script><![CDATA[from omnetpp.scave import results, chart, vectorops as ops
import matplotlib.pyplot as plt
import pandas as pd

params = chart.get_properties()

# This expression selects the results (you might be able to logically simplify it)

filter_expression = params["filter"]

# The data is returned as a Pandas DataFrame
df = results.get_vectors(filter_expression, include_attrs=True, include_itervars=True)

df = ops.perform_vector_ops(df, params["vector_operations"])

# You can perform any transformations on the data here

#d = {'numhosts': [10,20,50,100,200,500,1000,2000,5000],'performance': [417,247,103,51,21,8,3.5,1.7]}

#d = {'numhosts': [10,20,50,100,200,500,1000,2000],'performance': [417,247,103,51,21,8,3.5,1.7]}

d = {'numhosts': [10,20,50,100,200,500,1000,2000,5000,10000],'performance': [417*4*10,247*4*20,103*4*50,51*4*100,21*4*200,8*4*500,3.5*4*1000,1.7*4*2000,0.7*4*5000,0.3*4*10000]}
du = {'numhosts': [10,20,50,100,200,500,1000,2000,5000,10000],'performance': [1800*4*10,1085*4*20,535*4*50,278*4*100,132*4*200,42*4*500,18*4*1000,8.5*4*2000,3*4*5000,1.4*4*10000]}
db = {'numhosts': [10,20,50,100,200,500,1000,2000,5000,10000],'performance': [306*4*10,175*4*20,74*4*50,35*4*100,15*4*200,5*4*500,2*4*1000,1*4*2000,0.35*4*5000,0.2*4*10000]}
dc = {'numhosts': [10,20,50,100,200,500,1000,2000,5000,10000],'performance': [90*4*10,55*4*20,23*4*50,11*4*100,4.5*4*200,1.7*4*500,0.7*4*1000,0.35*4*2000,0.12*4*5000,0.06*4*10000]}

print("d:",d)
print("du:",du)

df = pd.DataFrame(d)
dfu = pd.DataFrame(du)
dfb = pd.DataFrame(db)
dfc = pd.DataFrame(dc)

# Tx = 4 * P * numhosts

print(df)
print(dfu)

df = df.pivot_table('performance','numhosts')
dfu = dfu.pivot_table('performance','numhosts')
dfb = dfb.pivot_table('performance','numhosts')
dfc = dfc.pivot_table('performance','numhosts')

print(df)
print(dfu)

#for i in df:
#    print("i:",i)
#    i['performance'] = i['performance'] * 4 * i['numhosts']
#    print("p:",i['performance'])

plt.xlabel('Number of receivers (numhosts)')

#title, legend = chart.extract_label_columns(df)

for t in df.itertuples(index=False):
    style = dict()
    interp = t.interpolationmode if 'interpolationmode' in df else 'sample-hold' if 'enum' in df else None
    if interp:
        if interp == "none":
            style['linestyle'] = ' '
            style['marker'] = '.'
        elif interp == "linear":
            pass # nothing to do
        elif interp == "sample-hold":
            style['drawstyle'] = 'steps-post'
        elif interp == "backward-sample-hold":
            style['drawstyle'] = 'steps-pre'

style['marker'] = 's'
style['markersize'] = 3

plt.plot(df, **style)

plt.plot(dfu, **style)

plt.plot(dfb, **style)

plt.plot(dfc, **style)

#plt.xscale('log')

plt.title("Rx/sec")

plt.legend(['wifi','unitdisk','bmac','csmacamac'])
plt.grid()]]></script>
            <dialogPage id="Main" label="Main"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xswt xmlns:x="http://sweet_swt.sf.net/xswt">

  <import xmlns="http://sweet_swt.sf.net/xswt">
    <package name="java.lang"/>
    <package name="org.eclipse.swt.widgets" />
    <package name="org.eclipse.swt.graphics" />
    <package name="org.eclipse.swt.layout" />
    <package name="org.eclipse.swt.custom" />
    <package name="org.omnetpp.common.wizard.support" />
    <package name="org.omnetpp.ned.editor.wizards.support" />
    <package name="org.omnetpp.cdt.wizard.support" />
  </import>
  <layout x:class="GridLayout" numColumns="2"/>

  <x:children>

    <!-- page generated from the following spec:
Names {
	chartName,
},
Options {
	Use antialias?,
	Use caching?,
},
Colors {
	backgroundColor
}    
    -->
    
    <!-- Names { -->
    <group text="Names">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- chartName -->
    <label text="Chart name:"/>
    <text x:id="chart_name" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </text>

    <!--  -->

    <!-- } -->
      </x:children>
    </group>

    <!-- Colors { -->
    <group text="Colors">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- backgroundColor -->
    <label text="Background color:"/>
    <ColorChooser x:id="background_color" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </ColorChooser>

    <!-- } -->
      </x:children>
    </group>

  </x:children>
</xswt>
]]></dialogPage>
            <dialogPage id="Input" label="Input"><![CDATA[<?xml version='1.0' encoding='UTF-8'?>
<xswt xmlns:x='http://sweet_swt.sf.net/xswt'>
  <import xmlns='http://sweet_swt.sf.net/xswt'>
    <package name='java.lang'/>
    <package name='org.eclipse.swt.widgets' />
    <package name='org.eclipse.swt.graphics' />
    <package name='org.eclipse.swt.layout' />
    <package name='org.eclipse.swt.custom' />
  </import>
  <layout x:class='GridLayout' numColumns='1'/>
  <x:children>
    <group text=''>

      <layoutData x:class='GridData' horizontalAlignment='FILL' verticalAlignment='FILL' grabExcessHorizontalSpace='true' grabExcessVerticalSpace='true'/>
      <layout x:class='GridLayout' numColumns='2'/>

      <x:children>
            <label text="Filter expression:">
            	<layoutData x:class="GridData" horizontalAlignment="BEGINNING" verticalAlignment="BEGINNING"/>
            </label>
            <text x:id="filter" x:style="BORDER|WRAP|MULTI" x:id.isFilter="true"> 
                <layoutData x:class="GridData" horizontalAlignment="FILL" verticalAlignment="FILL" grabExcessHorizontalSpace="true" grabExcessVerticalSpace="true"/>
            </text>

            <label text="Chart Title:"/>
            <text x:id="title" x:style="BORDER">
          <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
        </text>
      </x:children>

    </group>
  </x:children>
</xswt>]]></dialogPage>
        </chart>
    </charts>
</analysis>
