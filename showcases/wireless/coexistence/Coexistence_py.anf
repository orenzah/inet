<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<analysis version="2">
    <inputs>
        <input pattern="/inet/showcases/wireless/coexistence/results/*Performance-*.vec"/>
        <input pattern="/inet/showcases/wireless/coexistence/results/*Performance-*.sca"/>
        <input pattern="/inet/showcases/wireless/coexistence/results/ParameterStudy-aUnitBackoffPeriod=*-#*.vec"/>
        <input pattern="/inet/showcases/wireless/coexistence/results/ParameterStudy-aUnitBackoffPeriod=*-#*.sca"/>
    </inputs>
    <charts>
        <chart name="Wifi performance" script="import results&#10;import chart&#10;&#10;df_wifi = results.getScalars(&quot;&quot;&quot;&#10;(run(CoexistencePerformance-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WifiHostsOnlyPerformance-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;df_wpan = results.getScalars(&quot;&quot;&quot;&#10;(run(CoexistencePerformance-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WpanHostsOnlyPerformance-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;print(&quot;---------- WIFI ----------&quot;)&#10;print(df_wifi)&#10;print(&quot;---------- WPAN ----------&quot;)&#10;print(df_wpan)&#10;&#10;# The scalars are transformed into a much simpler format&#10;df1 = results.pivotScalars(df_wifi, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;df2 = results.pivotScalars(df_wpan, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;&#10;print(df1)&#10;&#10;# Reordering the rows&#10;df1 = df1.reindex([&quot;WifiHostsOnlyPerformance&quot;, &quot;CoexistencePerformance&quot;])&#10;&#10;# renaming the row and column labels&#10;df1.columns=[&quot;Number of packets received&quot;]&#10;df1.index=[&quot;Wifi only&quot;, &quot;Wifi+Wpan coexistence&quot;]&#10;&#10;# Finally, the results are plotted&#10;chart.plotScalars(df1)&#10;" type="BarChart">
            <property name="Graph.Title" value="Wifi performance"/>
        </chart>
        <chart name="Wpan performance" script="import results&#10;import chart&#10;&#10;df_wifi = results.getScalars(&quot;&quot;&quot;&#10;(run(CoexistencePerformance-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WifiHostsOnlyPerformance-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;df_wpan = results.getScalars(&quot;&quot;&quot;&#10;(run(CoexistencePerformance-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WpanHostsOnlyPerformance-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;&#10;print(&quot;---------- WIFI ----------&quot;)&#10;print(df_wifi)&#10;print(&quot;---------- WPAN ----------&quot;)&#10;print(df_wpan)&#10;&#10;# The scalars are transformed into a much simpler format&#10;df1 = results.pivotScalars(df_wifi, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;df2 = results.pivotScalars(df_wpan, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;&#10;print(df2)&#10;&#10;# Reordering the rows&#10;df2 = df2.reindex([&quot;WpanHostsOnlyPerformance&quot;, &quot;CoexistencePerformance&quot;])&#10;&#10;# renaming the row and column labels&#10;df2.columns=[&quot;Number of packets received&quot;]&#10;df2.index=[&quot;Wpan only&quot;, &quot;Wifi+Wpan coexistence&quot;]&#10;&#10;# Finally, the results are plotted&#10;chart.plotScalars(df2)&#10;" type="BarChart">
            <property name="Graph.Title" value="Wpan performance"/>
        </chart>
        <chart name="Wifi performance, updated" script="import results&#10;import chart&#10;&#10;df_wifi = results.getScalars(&quot;&quot;&quot;&#10;(run(CoexistencePerformance-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WifiHostsOnlyPerformance-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(file(*ParameterStudy-aUnitBackoffPeriod=60*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;df_wpan = results.getScalars(&quot;&quot;&quot;&#10;(run(CoexistencePerformance-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WpanHostsOnlyPerformance-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(file(*ParameterStudy-aUnitBackoffPeriod=60*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;&#10;print(&quot;---------- WIFI ----------&quot;)&#10;print(df_wifi)&#10;print(&quot;---------- WPAN ----------&quot;)&#10;print(df_wpan)&#10;&#10;# The scalars are transformed into a much simpler format&#10;df1 = results.pivotScalars(df_wifi, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;df2 = results.pivotScalars(df_wpan, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;&#10;print(df1)&#10;&#10;# Reordering the rows&#10;df1 = df1.reindex([&quot;WifiHostsOnlyPerformance&quot;, &quot;CoexistencePerformance&quot;, &quot;ParameterStudy&quot;])&#10;&#10;# renaming the row and column labels&#10;df1.columns=[&quot;Number of packets received&quot;]&#10;df1.index=[&quot;Wifi only&quot;, &quot;Wifi+Wpan&quot;, &quot;Wifi+Wpan tweaked parameters&quot;]&#10;&#10;# Finally, the results are plotted&#10;chart.plotScalars(df1)&#10;" type="BarChart">
            <property name="Graph.Title" value="Wifi performance, updated"/>
        </chart>
        <chart name="Wpan performance, updated" script="import results&#10;import chart&#10;&#10;df_wifi = results.getScalars(&quot;&quot;&quot;&#10;(run(CoexistencePerformance-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WifiHostsOnlyPerformance-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(file(*ParameterStudy-aUnitBackoffPeriod=60*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;df_wpan = results.getScalars(&quot;&quot;&quot;&#10;(run(CoexistencePerformance-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WpanHostsOnlyPerformance-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(file(*ParameterStudy-aUnitBackoffPeriod=60*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;&#10;print(&quot;---------- WIFI ----------&quot;)&#10;print(df_wifi)&#10;print(&quot;---------- WPAN ----------&quot;)&#10;print(df_wpan)&#10;&#10;# The scalars are transformed into a much simpler format&#10;df1 = results.pivotScalars(df_wifi, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;df2 = results.pivotScalars(df_wpan, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;&#10;print(df2)&#10;&#10;# Reordering the rows&#10;df2 = df2.reindex([&quot;WpanHostsOnlyPerformance&quot;, &quot;CoexistencePerformance&quot;, &quot;ParameterStudy&quot;])&#10;&#10;# renaming the row and column labels&#10;df2.columns=[&quot;Number of packets received&quot;]&#10;df2.index=[&quot;Wpan only&quot;, &quot;Wifi+Wpan&quot;, &quot;Wifi+Wpan tweaked parameters&quot;]&#10;&#10;# Finally, the results are plotted&#10;chart.plotScalars(df2)&#10;" type="BarChart">
            <property name="Graph.Title" value="Wpan performance, updated"/>
        </chart>
        <chart name="Parameter study, Wifi performance" script="import results&#10;import chart&#10;import pandas as pd&#10;&#10;filter_string = &quot;&quot;&quot;(file(*ParameterStudy-aUnitBackoffPeriod=*) AND module(*.wifiHost2.udp) AND name(packetReceived:count))&quot;&quot;&quot;&#10;&#10;df = results.getScalars(filter_string)&#10;&#10;&#10;&quot;&quot;&quot;&#10;#print(results.pivotScalars(df), columns=['measurement'])&#10;df = results.transform_results(df)&#10;&#10;print(df)&#10;&#10;df[(&quot;itervar&quot;, &quot;aUnitBackoffPeriod&quot;)] = pd.to_numeric(df[(&quot;itervar&quot;, &quot;aUnitBackoffPeriod&quot;)]) &#10;&#10;df = df.groupby(&quot;measurement&quot;).mean()&#10;&#10;df.sort_values((&quot;itervar&quot;, &quot;aUnitBackoffPeriod&quot;), inplace=True)&#10;#df = results.pivotScalars(df, index=['measurement'])&#10;df = df[[('result', 'value')]]&#10;print(df)&#10;&#10;&quot;&quot;&quot;&#10;&#10;df = results.pivotScalars(df, columns=['aUnitBackoffPeriod'])&#10;print(df)&#10;chart.plotScalars(df)&#10;&#10;chart.setProperty('Graph.Title', chart.getName())&#10;&#10;chart.setProperties(chart.getProperties())&#10;" type="BarChart">
            <property name="Graph.Title" value="Parameter study, Wifi performance"/>
            <property name="Legend.Display" value="false"/>
        </chart>
        <chart name="Parameter study, Wpan performance" script="import results&#10;import chart&#10;import pandas as pd&#10;&#10;filter_string = &quot;&quot;&quot;(file(*ParameterStudy-aUnitBackoffPeriod=*) AND module(*.wpanHost2.udp) AND name(packetReceived:count))&quot;&quot;&quot;&#10;&#10;df = results.getScalars(filter_string)&#10;&#10;&#10;&quot;&quot;&quot;&#10;#print(results.pivotScalars(df), columns=['measurement'])&#10;df = results.transform_results(df)&#10;&#10;print(df)&#10;&#10;df[(&quot;itervar&quot;, &quot;aUnitBackoffPeriod&quot;)] = pd.to_numeric(df[(&quot;itervar&quot;, &quot;aUnitBackoffPeriod&quot;)]) &#10;&#10;df = df.groupby(&quot;measurement&quot;).mean()&#10;&#10;df.sort_values((&quot;itervar&quot;, &quot;aUnitBackoffPeriod&quot;), inplace=True)&#10;#df = results.pivotScalars(df, index=['measurement'])&#10;df = df[[('result', 'value')]]&#10;print(df)&#10;&#10;&quot;&quot;&quot;&#10;&#10;df = results.pivotScalars(df, columns=['aUnitBackoffPeriod'])&#10;print(df)&#10;chart.plotScalars(df)&#10;&#10;chart.setProperty('Graph.Title', chart.getName())&#10;&#10;chart.setProperties(chart.getProperties())&#10;" type="BarChart">
            <property name="Graph.Title" value="Parameter study, Wpan performance"/>
            <property name="Legend.Display" value="false"/>
        </chart>
    </charts>
</analysis>
