<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<analysis version="2">
    <inputs>
        <input pattern="/inet/showcases/wireless/coexistence/results/RealisticPsd*Only-*.vec"/>
        <input pattern="/inet/showcases/wireless/coexistence/results/RealisticPsd*Only-*.sca"/>
        <input pattern="results/RealisticPsd-*.vec"/>
        <input pattern="results/RealisticPsd-*.sca"/>
        <input pattern="results/Scalar-*.vec"/>
        <input pattern="results/Scalar-*.sca"/>
        <input pattern="results/DimensionalIdentical-*.sca"/>
        <input pattern="results/DimensionalIdentical-*.vec"/>
    </inputs>
    <charts>
        <chart name="Wifi performance" script="import results&#10;import chart&#10;&#10;df_wifi = results.getScalars(&quot;&quot;&quot;&#10;(run(Coexistence-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WifiOnly-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;df_wpan = results.getScalars(&quot;&quot;&quot;&#10;(run(Coexistence-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WpanOnly-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;print(&quot;---------- WIFI ----------&quot;)&#10;print(df_wifi)&#10;print(&quot;---------- WPAN ----------&quot;)&#10;print(df_wpan)&#10;&#10;# The scalars are transformed into a much simpler format&#10;df1 = results.pivotScalars(df_wifi, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;df2 = results.pivotScalars(df_wpan, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;&#10;print(df1)&#10;&#10;# Reordering the rows&#10;df1 = df1.reindex([&quot;WifiOnly&quot;, &quot;Coexistence&quot;])&#10;&#10;# renaming the row and column labels&#10;df1.columns=[&quot;Number of packets received&quot;]&#10;df1.index=[&quot;Wifi only&quot;, &quot;Wifi+Wpan coexistence&quot;]&#10;&#10;# Finally, the results are plotted&#10;chart.plotScalars(df1)&#10;" type="BarChart">
            <property name="Graph.Title" value="Wifi performance"/>
        </chart>
        <chart name="Wpan performance" script="import results&#10;import chart&#10;&#10;df_wifi = results.getScalars(&quot;&quot;&quot;&#10;(run(Coexistence-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WifiOnly-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;df_wpan = results.getScalars(&quot;&quot;&quot;&#10;(run(Coexistence-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WpanOnly-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;&#10;print(&quot;---------- WIFI ----------&quot;)&#10;print(df_wifi)&#10;print(&quot;---------- WPAN ----------&quot;)&#10;print(df_wpan)&#10;&#10;# The scalars are transformed into a much simpler format&#10;df1 = results.pivotScalars(df_wifi, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;df2 = results.pivotScalars(df_wpan, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;&#10;print(df2)&#10;&#10;# Reordering the rows&#10;df2 = df2.reindex([&quot;WpanOnly&quot;, &quot;Coexistence&quot;])&#10;&#10;# renaming the row and column labels&#10;df2.columns=[&quot;Number of packets received&quot;]&#10;df2.index=[&quot;Wpan only&quot;, &quot;Wifi+Wpan coexistence&quot;]&#10;&#10;# Finally, the results are plotted&#10;chart.plotScalars(df2)&#10;" type="BarChart">
            <property name="Graph.Title" value="Wpan performance"/>
        </chart>
        <chart name="Wifi performance" script="# IDE version   5.4.1.181107-a953dcfb90&#10;&#10;import results&#10;import matplotlib.pyplot as plt&#10;&#10;df_wifi = results.getScalars(&quot;&quot;&quot;&#10;(run(RealisticPsd-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(RealisticPsdWifiOnly-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;print(df_wifi)&#10;&#10;# The scalars are transformed into a much simpler format&#10;df1 = results.pivotScalars(df_wifi, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;&#10;# Reordering the rows&#10;df1 = df1.reindex([&quot;RealisticPsdWifiOnly&quot;, &quot;RealisticPsd&quot;])&#10;&#10;# renaming the row and column labels&#10;df1.columns=[&quot;Number of packets received&quot;]&#10;df1.index=[&quot;Wifi only&quot;, &quot;Wifi+WPAN coexistence&quot;]&#10;&#10;ax = df1.plot(kind='bar', zorder=2, align='center', width=0.8, figsize=(8,6))&#10;#plt.legend().remove()&#10;plt.title(&quot;&quot;&quot;Wifi performance&quot;&quot;&quot;)&#10;&#10;plt.grid(b=True, which='major', axis='y', linestyle='--')&#10;plt.grid(b=True, which='minor', axis='y', linestyle='None')&#10;#plt.minorticks_on()&#10;plt.xticks(rotation=0)&#10;plt.xlabel(&quot;&quot;)&#10;&#10;for p in ax.patches:&#10;    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 200),&#10;                horizontalalignment='center', verticalalignment='top', color='white', size=12)&#10;&#10;&#10;print(ax)&#10;&#10;bottom, top = plt.ylim()&#10;plt.ylim(bottom, top*1.05)&#10;&#10;#plt.tight_layout()&#10;&#10;#plt.savefig('rcvdpackets.png', dpi=120, bbox_inches='tight')&#10;plt.savefig('wifiperformance.png', dpi=120, bbox_inches='tight', transparent=True)&#10;" type="MatplotlibChart"/>
        <chart name="Wpan performance" script="# IDE version   5.4.1.181107-a953dcfb90&#10;&#10;import results&#10;import matplotlib.pyplot as plt&#10;&#10;df_wifi = results.getScalars(&quot;&quot;&quot;&#10;(run(RealisticPsd-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(RealisticPsdWpanOnly-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;print(df_wifi)&#10;&#10;# The scalars are transformed into a much simpler format&#10;df1 = results.pivotScalars(df_wifi, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;&#10;# Reordering the rows&#10;df1 = df1.reindex([&quot;RealisticPsdWpanOnly&quot;, &quot;RealisticPsd&quot;])&#10;&#10;# renaming the row and column labels&#10;df1.columns=[&quot;Number of packets received&quot;]&#10;df1.index=[&quot;WPAN only&quot;, &quot;Wifi+WPAN coexistence&quot;]&#10;&#10;ax = df1.plot(kind='bar', zorder=2, align='center', width=0.8, figsize=(8,6))&#10;#plt.legend().remove()&#10;plt.title(&quot;&quot;&quot;WPAN performance&quot;&quot;&quot;)&#10;&#10;plt.grid(b=True, which='major', axis='y', linestyle='--')&#10;plt.grid(b=True, which='minor', axis='y', linestyle='None')&#10;#plt.minorticks_on()&#10;plt.xticks(rotation=0)&#10;plt.xlabel(&quot;&quot;)&#10;&#10;print(&quot;xlim&quot;,plt.xlim())&#10;&#10;xlimleft, xlimright = plt.xlim()&#10;&#10;#plt.xlim(2 * xlimleft, 2 * xlimright)&#10;&#10;for p in ax.patches:&#10;    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 2),&#10;                horizontalalignment='center', verticalalignment='top', color='white', size=12)&#10;&#10;&#10;print(ax)&#10;&#10;bottom, top = plt.ylim()&#10;plt.ylim(bottom, top*1.1)&#10;&#10;#plt.tight_layout()&#10;&#10;plt.savefig('wpanperformance.png', dpi=120, bbox_inches='tight', transparent=True)&#10;" type="MatplotlibChart"/>
        <chart name="Wifi throughput" script="# IDE version   5.4.1.181107-a953dcfb90&#10;&#10;import results&#10;import matplotlib.pyplot as plt&#10;&#10;df_wifi = results.getScalars(&quot;&quot;&quot;&#10;(run(Coexistence-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WifiOnly-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;print(df_wifi)&#10;&#10;# The scalars are transformed into a much simpler format&#10;df1 = results.pivotScalars(df_wifi, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;&#10;# Reordering the rows&#10;df1 = df1.reindex([&quot;WifiOnly&quot;, &quot;Coexistence&quot;])&#10;&#10;# renaming the row and column labels&#10;df1.columns=[&quot;Number of packets received&quot;]&#10;df1.index=[&quot;Wifi only&quot;, &quot;Wifi+WPAN coexistence&quot;]&#10;&#10;#print(&quot;DF1:&quot;,df1[&quot;Number of packets received&quot;][0])&#10;&#10;df1[&quot;Number of packets received&quot;][0] *= (1000 / 5 * 8 / 1000000)&#10;df1[&quot;Number of packets received&quot;][1] *= (1000 / 5 * 8 / 1000000)&#10;&#10;ax = df1.plot(kind='bar', zorder=2, align='center', width=0.8, figsize=(8,6))&#10;#plt.legend().remove()&#10;plt.title(&quot;&quot;&quot;Wifi performance&quot;&quot;&quot;)&#10;&#10;plt.legend(['Application-level throughput'])&#10;&#10;plt.grid(b=True, which='major', axis='y', linestyle='--')&#10;plt.grid(b=True, which='minor', axis='y', linestyle='None')&#10;#plt.minorticks_on()&#10;plt.xticks(rotation=0)&#10;plt.xlabel(&quot;&quot;)&#10;&#10;for p in ax.patches:&#10;    ax.annotate(str(round(p.get_height(),2)) + &quot; Mbps&quot;, (p.get_x() + p.get_width() / 2, p.get_height() - 0.4),&#10;                horizontalalignment='center', verticalalignment='top', color='white', size=12)&#10;&#10;&#10;print(ax)&#10;&#10;bottom, top = plt.ylim()&#10;plt.ylim(bottom, top*1.05)&#10;&#10;#plt.tight_layout()&#10;&#10;#plt.savefig('rcvdpackets.png', dpi=120, bbox_inches='tight')&#10;plt.savefig('wifithroughput.png', dpi=120, bbox_inches='tight', transparent=True)&#10;" type="MatplotlibChart"/>
        <chart name="WPAN throughput" script="# IDE version   5.4.1.181107-a953dcfb90&#10;&#10;import results&#10;import matplotlib.pyplot as plt&#10;&#10;df_wifi = results.getScalars(&quot;&quot;&quot;&#10;(run(Coexistence-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WpanOnly-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;print(df_wifi)&#10;&#10;# The scalars are transformed into a much simpler format&#10;df1 = results.pivotScalars(df_wifi, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;&#10;# Reordering the rows&#10;df1 = df1.reindex([&quot;WpanOnly&quot;, &quot;Coexistence&quot;])&#10;&#10;# renaming the row and column labels&#10;df1.columns=[&quot;Number of packets received&quot;]&#10;df1.index=[&quot;WPAN only&quot;, &quot;Wifi+WPAN coexistence&quot;]&#10;&#10;df1[&quot;Number of packets received&quot;][0] *= (88 / 5 * 8 / 1000)&#10;df1[&quot;Number of packets received&quot;][1] *= (88 / 5 * 8 / 1000)&#10;&#10;ax = df1.plot(kind='bar', zorder=2, align='center', width=0.8, figsize=(8,6))&#10;#plt.legend().remove()&#10;plt.title(&quot;&quot;&quot;WPAN performance&quot;&quot;&quot;)&#10;&#10;plt.legend(['Application-level throughput'])&#10;&#10;plt.grid(b=True, which='major', axis='y', linestyle='--')&#10;plt.grid(b=True, which='minor', axis='y', linestyle='None')&#10;#plt.minorticks_on()&#10;plt.xticks(rotation=0)&#10;plt.xlabel(&quot;&quot;)&#10;&#10;print(&quot;xlim&quot;,plt.xlim())&#10;&#10;xlimleft, xlimright = plt.xlim()&#10;&#10;#plt.xlim(2 * xlimleft, 2 * xlimright)&#10;&#10;for p in ax.patches:&#10;    ax.annotate(str(round(p.get_height(),2)) + &quot; kbps&quot;, (p.get_x() + p.get_width() / 2, p.get_height() - 0.4),&#10;                horizontalalignment='center', verticalalignment='top', color='white', size=12)&#10;&#10;&#10;print(ax)&#10;&#10;bottom, top = plt.ylim()&#10;plt.ylim(bottom, top*1.1)&#10;&#10;#plt.tight_layout()&#10;&#10;plt.savefig('wpanthroughput.png', dpi=120, bbox_inches='tight', transparent=True)&#10;" type="MatplotlibChart"/>
        <chart name="Delay" script="import results&#10;import matplotlib.pyplot as plt&#10;&#10;df = results.getVectors(&quot;&quot;&quot;&#10;ADD vectors WHERE run(Coexistence-0-*) AND module(CoexistenceShowcase.wifiHost2.app[0]) AND name(endToEndDelay:vector)&#10;ADD vectors WHERE run(Coexistence-0-*) AND module(CoexistenceShowcase.wpanHost2.app[0]) AND name(endToEndDelay:vector)&#10;&#10;&quot;&quot;&quot;)&#10;df = df[df.type == 'vector']&#10;plt.xlabel('Simulation time (s)')&#10;plt.ylabel('Vector value')&#10;for t in df[['vectime', 'vecvalue', 'module', 'name']].itertuples(index=False):&#10;    plt.plot(t[0], t[1], label=(t[2] + ':' + t[3])[:-7], drawstyle='default', linestyle='', marker='.')&#10;plt.legend()&#10;plt.title(&quot;&quot;&quot;endToEndDelay:vector&quot;&quot;&quot;)&#10;plt.tight_layout()&#10;" type="MatplotlibChart"/>
        <chart name="minSNIR" script="import results&#10;import matplotlib.pyplot as plt&#10;&#10;df = results.getVectors(&quot;&quot;&quot;&#10;ADD vectors WHERE run(Coexistence-1-*) AND module(CoexistenceShowcase.wifiHost2.wlan[0].radio) AND name(minSnir:vector)&#10;ADD vectors WHERE run(Coexistence-1-*) AND module(CoexistenceShowcase.wpanHost2.wlan[0].radio) AND name(minSnir:vector)&#10;&#10;&quot;&quot;&quot;)&#10;df = df[df.type == 'vector']&#10;plt.xlabel('Simulation time (s)')&#10;#plt.ylabel('Vector value')&#10;for t in df[['vectime', 'vecvalue', 'module', 'name']].itertuples(index=False):&#10;    plt.plot(t[0], t[1], label=(t[2] + ':' + t[3])[:-7], drawstyle='default',linestyle='',marker='s', markersize='1')&#10;plt.legend()&#10;plt.grid(linestyle='--')&#10;plt.title(&quot;&quot;&quot;minSnir:vector&quot;&quot;&quot;)&#10;plt.tight_layout()&#10;&#10;ax = plt.gca()&#10;&#10;ax.set_yscale('log')&#10;" type="MatplotlibChart"/>
        <chart name="ber" script="import results&#10;import matplotlib.pyplot as plt&#10;&#10;df = results.getVectors(&quot;&quot;&quot;&#10;ADD vectors WHERE run(Coexistence-1-*) AND module(CoexistenceShowcase) AND name(bitErrorRate:vector)&#10;&#10;&quot;&quot;&quot;)&#10;df = df[df.type == 'vector']&#10;plt.xlabel('Simulation time (s)')&#10;plt.ylabel('Vector value')&#10;for t in df[['vectime', 'vecvalue', 'module', 'name']].itertuples(index=False):&#10;    plt.plot(t[0], t[1], label=(t[2] + ':' + t[3])[:-7], drawstyle='default',linestyle='',marker='s',markersize=1)&#10;plt.legend()&#10;plt.title(&quot;&quot;&quot;bitErrorRate:vector CoexistenceShowcase&quot;&quot;&quot;)&#10;plt.tight_layout()&#10;" type="MatplotlibChart"/>
        <chart name="per" script="import results&#10;import matplotlib.pyplot as plt&#10;&#10;df = results.getVectors(&quot;&quot;&quot;&#10;ADD vectors WHERE run(Coexistence-1-*) AND module(CoexistenceShowcase) AND name(packetErrorRate:vector)&#10;&#10;&quot;&quot;&quot;)&#10;df = df[df.type == 'vector']&#10;plt.xlabel('Simulation time (s)')&#10;plt.ylabel('Vector value')&#10;for t in df[['vectime', 'vecvalue', 'module', 'name']].itertuples(index=False):&#10;    plt.plot(t[0], t[1], label=(t[2] + ':' + t[3])[:-7], drawstyle='default', linestyle='', marker='s', markersize=1)&#10;plt.legend()&#10;plt.title(&quot;&quot;&quot;packetErrorRate:vector CoexistenceShowcase&quot;&quot;&quot;)&#10;plt.tight_layout()&#10;" type="MatplotlibChart"/>
        <chart name="ScalarIdenticalWifi" script="# IDE version   5.4.1.181107-a953dcfb90&#10;&#10;import results&#10;import matplotlib.pyplot as plt&#10;&#10;df_wifi = results.getScalars(&quot;&quot;&quot;&#10;(run(Scalar-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WifiOnly-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;print(df_wifi)&#10;&#10;# The scalars are transformed into a much simpler format&#10;df1 = results.pivotScalars(df_wifi, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;&#10;# Reordering the rows&#10;df1 = df1.reindex([&quot;WifiOnly&quot;, &quot;Scalar&quot;])&#10;&#10;# renaming the row and column labels&#10;df1.columns=[&quot;Number of packets received&quot;]&#10;df1.index=[&quot;Wifi only&quot;, &quot;Wifi+WPAN coexistence&quot;]&#10;&#10;ax = df1.plot(kind='bar', zorder=2, align='center', width=0.8, figsize=(8,6))&#10;#plt.legend().remove()&#10;plt.title(&quot;&quot;&quot;Wifi performance&quot;&quot;&quot;)&#10;&#10;plt.grid(b=True, which='major', axis='y', linestyle='--')&#10;plt.grid(b=True, which='minor', axis='y', linestyle='None')&#10;#plt.minorticks_on()&#10;plt.xticks(rotation=0)&#10;plt.xlabel(&quot;&quot;)&#10;&#10;for p in ax.patches:&#10;    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 200),&#10;                horizontalalignment='center', verticalalignment='top', color='white', size=12)&#10;&#10;&#10;print(ax)&#10;&#10;bottom, top = plt.ylim()&#10;plt.ylim(bottom, top*1.05)&#10;&#10;#plt.tight_layout()&#10;&#10;#plt.savefig('rcvdpackets.png', dpi=120, bbox_inches='tight')&#10;#plt.savefig('wifiperformance.png', dpi=120, bbox_inches='tight', transparent=True)&#10;" type="MatplotlibChart"/>
        <chart name="ScalarIdenticalWpan" script="# IDE version   5.4.1.181107-a953dcfb90&#10;&#10;import results&#10;import matplotlib.pyplot as plt&#10;&#10;df_wifi = results.getScalars(&quot;&quot;&quot;&#10;(run(Scalar-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WpanOnly-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;print(df_wifi)&#10;&#10;# The scalars are transformed into a much simpler format&#10;df1 = results.pivotScalars(df_wifi, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;&#10;# Reordering the rows&#10;df1 = df1.reindex([&quot;WpanOnly&quot;, &quot;Scalar&quot;])&#10;&#10;# renaming the row and column labels&#10;df1.columns=[&quot;Number of packets received&quot;]&#10;df1.index=[&quot;WPAN only&quot;, &quot;Wifi+WPAN coexistence&quot;]&#10;&#10;ax = df1.plot(kind='bar', zorder=2, align='center', width=0.8, figsize=(8,6))&#10;#plt.legend().remove()&#10;&#10;plt.grid(b=True, which='major', axis='y', linestyle='--')&#10;plt.grid(b=True, which='minor', axis='y', linestyle='None')&#10;#plt.minorticks_on()&#10;plt.xticks(rotation=0)&#10;plt.xlabel(&quot;&quot;)&#10;&#10;print(&quot;xlim&quot;,plt.xlim())&#10;&#10;xlimleft, xlimright = plt.xlim()&#10;&#10;#plt.xlim(2 * xlimleft, 2 * xlimright)&#10;&#10;height = []&#10;&#10;for p in ax.patches:&#10;    height.append(p.get_height())&#10;    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 2),&#10;                horizontalalignment='center', verticalalignment='top', color='white', size=12)&#10;&#10;print(&quot;height&quot;,height)&#10;&#10;plt.title(&quot;&quot;&quot;WPAN performance&quot;&quot;&quot; + str(height))&#10;&#10;print(ax)&#10;&#10;bottom, top = plt.ylim()&#10;plt.ylim(bottom, top*1.1)&#10;&#10;#plt.tight_layout()&#10;&#10;#plt.savefig('wpanperformance.png', dpi=120, bbox_inches='tight', transparent=True)&#10;" type="MatplotlibChart"/>
        <chart name="DimensionalIdenticalWifi" script="# IDE version   5.4.1.181107-a953dcfb90&#10;&#10;import results&#10;import matplotlib.pyplot as plt&#10;&#10;df_wifi = results.getScalars(&quot;&quot;&quot;&#10;(run(DimensionalIdentical-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WifiOnly-*) AND module(*.wifiHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;print(df_wifi)&#10;&#10;# The scalars are transformed into a much simpler format&#10;df1 = results.pivotScalars(df_wifi, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;&#10;# Reordering the rows&#10;df1 = df1.reindex([&quot;WifiOnly&quot;, &quot;DimensionalIdentical&quot;])&#10;&#10;# renaming the row and column labels&#10;df1.columns=[&quot;Number of packets received&quot;]&#10;df1.index=[&quot;Wifi only&quot;, &quot;Wifi+WPAN coexistence&quot;]&#10;&#10;ax = df1.plot(kind='bar', zorder=2, align='center', width=0.8, figsize=(8,6))&#10;#plt.legend().remove()&#10;plt.title(&quot;&quot;&quot;Wifi performance&quot;&quot;&quot;)&#10;&#10;plt.grid(b=True, which='major', axis='y', linestyle='--')&#10;plt.grid(b=True, which='minor', axis='y', linestyle='None')&#10;#plt.minorticks_on()&#10;plt.xticks(rotation=0)&#10;plt.xlabel(&quot;&quot;)&#10;&#10;for p in ax.patches:&#10;    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 200),&#10;                horizontalalignment='center', verticalalignment='top', color='white', size=12)&#10;&#10;&#10;print(ax)&#10;&#10;bottom, top = plt.ylim()&#10;plt.ylim(bottom, top*1.05)&#10;&#10;#plt.tight_layout()&#10;&#10;#plt.savefig('rcvdpackets.png', dpi=120, bbox_inches='tight')&#10;#plt.savefig('wifiperformance.png', dpi=120, bbox_inches='tight', transparent=True)&#10;" type="MatplotlibChart"/>
        <chart name="DimensionalIdenticalWpan" script="# IDE version   5.4.1.181107-a953dcfb90&#10;&#10;import results&#10;import matplotlib.pyplot as plt&#10;&#10;df_wifi = results.getScalars(&quot;&quot;&quot;&#10;(run(DimensionalIdentical-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;OR&#10;(run(WpanOnly-*) AND module(*.wpanHost2.app[0]) AND name(packetReceived:count))&#10;&quot;&quot;&quot;)&#10;&#10;print(df_wifi)&#10;&#10;# The scalars are transformed into a much simpler format&#10;df1 = results.pivotScalars(df_wifi, columns=[&quot;name&quot;], index=[&quot;experiment&quot;])&#10;&#10;# Reordering the rows&#10;df1 = df1.reindex([&quot;WpanOnly&quot;, &quot;DimensionalIdentical&quot;])&#10;&#10;# renaming the row and column labels&#10;df1.columns=[&quot;Number of packets received&quot;]&#10;df1.index=[&quot;WPAN only&quot;, &quot;Wifi+WPAN coexistence&quot;]&#10;&#10;ax = df1.plot(kind='bar', zorder=2, align='center', width=0.8, figsize=(8,6))&#10;#plt.legend().remove()&#10;&#10;plt.grid(b=True, which='major', axis='y', linestyle='--')&#10;plt.grid(b=True, which='minor', axis='y', linestyle='None')&#10;#plt.minorticks_on()&#10;plt.xticks(rotation=0)&#10;plt.xlabel(&quot;&quot;)&#10;&#10;print(&quot;xlim&quot;,plt.xlim())&#10;&#10;xlimleft, xlimright = plt.xlim()&#10;&#10;#plt.xlim(2 * xlimleft, 2 * xlimright)&#10;&#10;height = []&#10;&#10;for p in ax.patches:&#10;    height.append(p.get_height())&#10;    ax.annotate(str(p.get_height()), (p.get_x() + p.get_width() / 2, p.get_height() - 2),&#10;                horizontalalignment='center', verticalalignment='top', color='white', size=12)&#10;&#10;print(&quot;height&quot;,height)&#10;&#10;plt.title(&quot;&quot;&quot;WPAN performance&quot;&quot;&quot; + str(height))&#10;&#10;print(ax)&#10;&#10;bottom, top = plt.ylim()&#10;plt.ylim(bottom, top*1.1)&#10;&#10;#plt.tight_layout()&#10;&#10;#plt.savefig('wpanperformance.png', dpi=120, bbox_inches='tight', transparent=True)&#10;" type="MatplotlibChart"/>
    </charts>
</analysis>
