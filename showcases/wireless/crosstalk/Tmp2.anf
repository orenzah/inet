<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<analysis version="2">
    <inputs>
        <input pattern="/inet/showcases/wireless/crosstalk/results/Tmp2-*.vec"/>
        <input pattern="/inet/showcases/wireless/crosstalk/results/Tmp2-*.sca"/>
        <input pattern="results/Tmp4-*.sca"/>
        <input pattern="results/Tmp4-*.vec"/>
    </inputs>
    <charts>
        <chart name="realistic" script="import results&#10;import matplotlib.pyplot as plt&#10;&#10;df = results.getScalars(&quot;&quot;&quot;&#10;ADD scalars WHERE run(Tmp2-*) AND module(CrosstalkShowcasePartiallyOverlappingFrequencyBands.host4.app[0]) AND name(packetReceived:count)&#10;&quot;&quot;&quot;)&#10;df = results.pivotScalars(df,index='channeldistance')&#10;df.plot(kind='bar')&#10;plt.legend().remove()&#10;plt.title(&quot;&quot;&quot;packetReceived:count CrosstalkShowcasePartiallyOverlappingFrequencyBands.host4.app[0]&quot;&quot;&quot;)&#10;plt.tight_layout()&#10;&#10;plt.grid(b=True,which='both',axis='y',linestyle='--')&#10;&#10;ax = plt.gca()&#10;&#10;ax.set_axisbelow(True)" type="MatplotlibChart"/>
        <chart name="Chart1" script="import results&#10;import chart&#10;&#10;import operations as ops&#10;&#10;# This expression selects the results (you might be able to logically simplify it)&#10;filter_expression = &quot;&quot;&quot;&#10;ADD scalars WHERE attr:experiment(Tmp2) AND attr:measurement($channeldistance=0) AND attr:replication(#0) AND module(CrosstalkShowcasePartiallyOverlappingFrequencyBands.host4.app[0]) AND name(packetReceived:count)&#10;ADD scalars WHERE attr:experiment(Tmp2) AND attr:measurement($channeldistance=1) AND attr:replication(#0) AND module(CrosstalkShowcasePartiallyOverlappingFrequencyBands.host4.app[0]) AND name(packetReceived:count)&#10;ADD scalars WHERE attr:experiment(Tmp2) AND attr:measurement($channeldistance=2) AND attr:replication(#0) AND module(CrosstalkShowcasePartiallyOverlappingFrequencyBands.host4.app[0]) AND name(packetReceived:count)&#10;ADD scalars WHERE attr:experiment(Tmp2) AND attr:measurement($channeldistance=3) AND attr:replication(#0) AND module(CrosstalkShowcasePartiallyOverlappingFrequencyBands.host4.app[0]) AND name(packetReceived:count)&#10;ADD scalars WHERE attr:experiment(Tmp2) AND attr:measurement($channeldistance=4) AND attr:replication(#0) AND module(CrosstalkShowcasePartiallyOverlappingFrequencyBands.host4.app[0]) AND name(packetReceived:count)&#10;ADD scalars WHERE attr:experiment(Tmp2) AND attr:measurement($channeldistance=5) AND attr:replication(#0) AND module(CrosstalkShowcasePartiallyOverlappingFrequencyBands.host4.app[0]) AND name(packetReceived:count)&#10;ADD scalars WHERE attr:experiment(Tmp2) AND attr:measurement($channeldistance=6) AND attr:replication(#0) AND module(CrosstalkShowcasePartiallyOverlappingFrequencyBands.host4.app[0]) AND name(packetReceived:count)&#10;ADD scalars WHERE attr:experiment(Tmp2) AND attr:measurement($channeldistance=7) AND attr:replication(#0) AND module(CrosstalkShowcasePartiallyOverlappingFrequencyBands.host4.app[0]) AND name(packetReceived:count)&#10;ADD scalars WHERE attr:experiment(Tmp2) AND attr:measurement($channeldistance=8) AND attr:replication(#0) AND module(CrosstalkShowcasePartiallyOverlappingFrequencyBands.host4.app[0]) AND name(packetReceived:count)&#10;ADD scalars WHERE attr:experiment(Tmp2) AND attr:measurement($channeldistance=9) AND attr:replication(#0) AND module(CrosstalkShowcasePartiallyOverlappingFrequencyBands.host4.app[0]) AND name(packetReceived:count)&#10;ADD scalars WHERE attr:experiment(Tmp2) AND attr:measurement($channeldistance=10) AND attr:replication(#0) AND module(CrosstalkShowcasePartiallyOverlappingFrequencyBands.host4.app[0]) AND name(packetReceived:count)&#10;ADD scalars WHERE attr:experiment(Tmp2) AND attr:measurement($channeldistance=11) AND attr:replication(#0) AND module(CrosstalkShowcasePartiallyOverlappingFrequencyBands.host4.app[0]) AND name(packetReceived:count)&#10;&quot;&quot;&quot;&#10;&#10;# The data is returned as a Pandas DataFrame&#10;df = results.getScalars(filter_expression)&#10;&#10;# Which we turn into a more usable format&#10;df = results.transform_results(df)&#10;&#10;# You can perform any transformations on the data here&#10;&#10;# Finally, the results are plotted&#10;chart.plotScalars(df)&#10;" type="BarChart">
            <property name="Graph.Title" value="packetReceived:count CrosstalkShowcasePartiallyOverlappingFrequencyBands.host4.app[0]"/>
            <property name="Legend.Display" value="false"/>
        </chart>
        <chart name="rectangular" script="import results&#10;import matplotlib.pyplot as plt&#10;&#10;df = results.getScalars(&quot;&quot;&quot;&#10;ADD scalars WHERE run(Tmp4-*) AND module(CrosstalkShowcasePartiallyOverlappingFrequencyBands.host4.app[0]) AND name(packetReceived:count)&#10;&quot;&quot;&quot;)&#10;df = results.pivotScalars(df,index='channeldistance')&#10;df.plot(kind='bar')&#10;plt.legend().remove()&#10;plt.title(&quot;&quot;&quot;packetReceived:count CrosstalkShowcasePartiallyOverlappingFrequencyBands.host4.app[0]&quot;&quot;&quot;)&#10;plt.tight_layout()&#10;&#10;plt.grid(b=True,which='both',axis='y',linestyle='--')&#10;&#10;ax = plt.gca()&#10;&#10;ax.set_axisbelow(True)" type="MatplotlibChart"/>
    </charts>
</analysis>
